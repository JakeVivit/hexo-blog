<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大前端之路</title>
  
  <subtitle>在成为大前端的路上</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-17T09:25:47.792Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jake Vivit</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue Cli3----由浅入深</title>
    <link href="http://yoursite.com/2018/08/09/vue-cli3/"/>
    <id>http://yoursite.com/2018/08/09/vue-cli3/</id>
    <published>2018-08-09T07:11:36.320Z</published>
    <updated>2018-08-17T09:25:47.792Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍vue cli3的功能和特点，以及它和vue cli2X的对比，vue cli3具有功能丰富，易于扩展，无需Eject，更具有面向未来的特点，那么把你的项目构建于vue cli3之上吧</p><h3 id="1-此前，Vue-CLI-3-0-已发布，该版本经历了重构，旨在："><a href="#1-此前，Vue-CLI-3-0-已发布，该版本经历了重构，旨在：" class="headerlink" title="1.此前，Vue CLI 3.0 已发布，该版本经历了重构，旨在："></a>1.此前，Vue CLI 3.0 已发布，该版本经历了重构，旨在：</h3><ul><li><p>1.减少现代前端工具的配置烦扰，尤其是在将多个工具混合在一起使用时；</p></li><li><p>2.尽可能在工具链中加入最佳实践，让它成为任意 Vue 应用程序的默认实践。</p></li></ul><hr><h3 id="2-nbsp-nbsp-nbsp-功能丰富"><a href="#2-nbsp-nbsp-nbsp-功能丰富" class="headerlink" title="2.&nbsp;&nbsp;&nbsp;功能丰富"></a>2.&nbsp;&nbsp;&nbsp;功能丰富</h3><ul><li>不仅支持Babel、TypeScript、ESLint，还支持了<a href="https://segmentfault.com/a/1190000011595620" target="_blank" rel="noopener">PostCSS</a>、<br><a href="https://blog.csdn.net/u010009623/article/details/54313233" target="_blank" rel="noopener">PWA</a>   </li><li>支持多页面模式—构建具有多个 HTML / JS 入口点的应用程序</li><li>无需Eject</li></ul><hr><h3 id="3-nbsp-nbsp-nbsp-起步"><a href="#3-nbsp-nbsp-nbsp-起步" class="headerlink" title="3.&nbsp;&nbsp;&nbsp;起步"></a>3.&nbsp;&nbsp;&nbsp;起步</h3><p><strong><em>安装(node &gt;= 8.9)</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"># OR</span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue-cli3-test</span><br></pre></td></tr></table></figure><p>来初始化一个项目</p><p><img src="https://zhangchongvip.oss-cn-beijing.aliyuncs.com/vue-cli3/cli3-1.png" alt="图片1" title="选择执行方式"></p><p>我们选中的是 Manually select features, 用来手动设置选项，在面向生产的项目是更加需要。</p><p><img src="https://zhangchongvip.oss-cn-beijing.aliyuncs.com/vue-cli3/QQ%E6%88%AA%E5%9B%BE20180816120338.png" alt="图片2" title="手动选择如上特性"></p><p><strong><em>在本文中我们会简单介绍 PWA, CSS Pre-processors和Unit Testing的用法，并在之后会写Blog做更详细的介绍</em></strong></p><p><strong><em>项目目录介绍</em></strong></p><p><img src="https://zhangchongvip.oss-cn-beijing.aliyuncs.com/vue-cli3/QQ%E6%88%AA%E5%9B%BE20180816130203.png" alt="图片3" title="目录结构"></p><p>目录结构相比vue-cli2简洁了不少，主要配置文件说明如下：</p><ul><li><p>tests—–单元测试目录</p></li><li><p>.browserslistrc—–浏览器兼容配置文件</p></li><li><p>.eslintrc.js—–eslint代码检查配置</p></li><li><p>.postcssrc.js—–postcss配置文件</p></li><li><p>.package.json—–项目依赖和启动的配置文件</p></li></ul><p>但是我们看到文件目录中缺少了有关的webpack的配置，在package.json文件中有这样的一段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"serve"</span>: <span class="string">"vue-cli-service serve"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"vue-cli-service build"</span>,</span><br><span class="line">    <span class="string">"lint"</span>: <span class="string">"vue-cli-service lint"</span>,</span><br><span class="line">    <span class="string">"test:unit"</span>: <span class="string">"vue-cli-service test:unit"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>当我们在控制台输入 npm dev server 很显然项目可以启动，并带有热更新和热重载，然而我们并没有在项目目录中发现 devServer 的配置项，<br>其实在Vue CLI的项目，中，@vue/cli-service 安装了一个名为 vue-cli-service 的命令。你可以在 npm scripts 中以 vue-cli-service、<br>或者从终端中./node_modules/.bin/vue-cli-service 访问这个命令。</p><hr><h3 id="4-nbsp-nbsp-nbsp-vue-config-js配置详解"><a href="#4-nbsp-nbsp-nbsp-vue-config-js配置详解" class="headerlink" title="4.&nbsp;&nbsp;&nbsp;vue-config.js配置详解"></a>4.&nbsp;&nbsp;&nbsp;vue-config.js配置详解</h3><p>首先我们直接启动本地服务：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure></p><p>在默认端口8080已经可以启动，然后我们在根目录下新建一个 <strong><em>vue.config.js</em></strong> 文件，并写上一下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">        port:<span class="number">8082</span>,</span><br><span class="line">        https:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>把端口改为8082并执行 <strong><em>npm run serve</em></strong> 我们发现本地服务启动的端口号改为了8082，显然，在执行<strong><em>npm run serve</em></strong> 的时候，服务指向了 <strong><em>vue.config.js</em></strong>这个文件。从<a href="https://cli.vuejs.org/zh/config/#全局-cli-配置" target="_blank" rel="noopener">官方文档</a>中我们了解到，vue-cli3简化了webpack的配置，并且有丰富的API可以供我们使用。</p><p>下面是我们常用的一些基本配置，很显然，即便是我们不修改vue.config.js用官方木人的配置一样可以完美运行，但是在实际项目中，往往需要一些特殊需求，所以修改配置还是蛮重要的一个环节。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//部署应用时的基本 URL。默认情况下，Vue CLI 会假设你的应用是被部署在一个域名的根路径上，</span></span><br><span class="line">    <span class="comment">//例如 https://www.my-app.com/。如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径。</span></span><br><span class="line">    <span class="comment">//例如，如果你的应用被部署在 https://www.my-app.com/my-app/，则设置 baseUrl 为 /my-app/。</span></span><br><span class="line">    <span class="comment">//这个值在开发环境下同样生效。如果你想把开发服务器架设在根路径，你可以使用一个条件式的值</span></span><br><span class="line">    baseUrl: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'/my-app/'</span> : <span class="string">'/'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当运行 vue-cli-service build 时生成的生产环境构建文件的目录。</span></span><br><span class="line">    <span class="comment">//注意目标目录在构建之前会被清除 (构建时传入 --no-clean 可关闭该行为)。</span></span><br><span class="line">    outputDir: <span class="string">'build'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录</span></span><br><span class="line">    assetsDir: <span class="string">'static'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定生成的 index.html 的输出路径 (相对于 outputDir)。也可以是一个绝对路径。</span></span><br><span class="line">    indexPath: <span class="string">'index_prod.html'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认情况下，生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存。</span></span><br><span class="line">    <span class="comment">//然而，这也要求 index 的 HTML 是被 Vue CLI 自动生成的。如果你无法使用 Vue CLI 生成的 index HTML，你可以通过将这个选项设为 false 来关闭文件名哈希。</span></span><br><span class="line">    <span class="comment">// filenameHashing: false,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//当 lintOnSave 是一个 truthy 的值时，eslint-loader 在开发和生产构建下都会被启用。</span></span><br><span class="line">    <span class="comment">//如果你想要在生产构建时禁用 eslint-loader，你可以用如下配置：</span></span><br><span class="line">    lintOnSave: process.env.NODE_ENV !== <span class="string">'production'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否使用包含运行时编译器的 Vue 构建版本。</span></span><br><span class="line">    <span class="comment">//设置为 true 后你就可以在 Vue 组件中使用 template 选项了，但是这会让你的应用额外增加 10kb 左右。</span></span><br><span class="line">    runtimeCompiler: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认情况下 babel-loader 会忽略所有 node_modules 中的文件。</span></span><br><span class="line">    <span class="comment">//如果你想要通过 Babel 显式转译一个依赖，可以在这个选项中列出来。</span></span><br><span class="line">    transpileDependencies: [],</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果你不需要生产环境的 source map，可以将其设置为 false 以加速生产环境构建。</span></span><br><span class="line">    productionSourceMap: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置生成的 HTML 中 &lt;link rel="stylesheet"&gt; 和 &lt;script&gt; 标签的 crossorigin 属性。</span></span><br><span class="line">    <span class="comment">//使用crossorigin属性，使得加载的跨域脚本可以得出跟同域脚本同样的报错信息。</span></span><br><span class="line">    crossorigin: <span class="literal">undefined</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在生成的 HTML 中的 &lt;link rel="stylesheet"&gt; 和 &lt;script&gt; 标签上启用 Subresource Integrity (SRI)。</span></span><br><span class="line">    <span class="comment">//如果你构建后的文件是部署在 CDN 上的，启用该选项可以提供额外的安全性, 这个标签是为了防止 CDN 篡改 javascript 用的。 。</span></span><br><span class="line">    integrity: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//（高级用法）这是一个一个函数，这个库提供了一个 webpack 原始配置的上层抽象，</span></span><br><span class="line">    <span class="comment">//使其可以定义具名的 loader 规则和具名插件，并有机会在后期进入这些规则并对它们的选项进行修改。</span></span><br><span class="line">    <span class="comment">//允许对内部的 webpack 配置进行更细粒度的修改。</span></span><br><span class="line">    chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//config.module</span></span><br><span class="line">        <span class="comment">//.rule('vue')</span></span><br><span class="line">        <span class="comment">//.use('vue-loader')</span></span><br><span class="line">        <span class="comment">//.loader('vue-loader')</span></span><br><span class="line">        <span class="comment">//.tap(options =&gt; &#123;</span></span><br><span class="line">        <span class="comment">// 修改它的选项...</span></span><br><span class="line">        <span class="comment">// return options</span></span><br><span class="line">        <span class="comment">//&#125;)</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果想在 JavaScript 中作为 CSS Modules 导入 CSS 或其它预处理文件，</span></span><br><span class="line">    <span class="comment">//该文件应该以 .module.(css|less|sass|scss|styl) 结尾：</span></span><br><span class="line">    css: &#123;</span><br><span class="line">        <span class="comment">//如果你想去掉文件名中的 .module，可以设置 vue.config.js 中的 css.modules 为 true</span></span><br><span class="line">        modules: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">//如果你希望自定义生成的 CSS Modules 模块的类名</span></span><br><span class="line">        loaderOptions: &#123;</span><br><span class="line">            css: &#123;</span><br><span class="line">                localIdentName: <span class="string">'[name]-[hash]'</span>,</span><br><span class="line">                camelCase: <span class="string">'only'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//比如你可以这样向所有 Sass 样式传入共享的全局变量：</span></span><br><span class="line">            sass: &#123;</span><br><span class="line">                <span class="comment">// @/ 是 src/ 的别名</span></span><br><span class="line">                <span class="comment">// 所以这里假设你有 `src/variables.scss` 这个文件</span></span><br><span class="line">                <span class="comment">// data: `@import "@/variables.scss";`</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//生产环境下是 true，开发环境下是 false</span></span><br><span class="line">        <span class="comment">//是否将组件中的 CSS 提取至一个独立的 CSS 文件中 (而不是动态注入到 JavaScript 中的 inline 代码)。</span></span><br><span class="line">        <span class="comment">//提取 CSS 在开发环境模式下是默认不开启的，因为它和 CSS 热重载不兼容。</span></span><br><span class="line">        <span class="comment">//然而，你仍然可以将这个值显性地设置为 true 在所有情况下都强制提取</span></span><br><span class="line">        extract: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="literal">true</span> : <span class="literal">false</span>,</span><br><span class="line">        sourceMap: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调整 webpack 配置最简单的方式就是在 vue.config.js 中的 configureWebpack 选项提供一个对象：</span></span><br><span class="line">    <span class="comment">//如果你需要基于环境有条件地配置行为，或者想要直接修改配置，</span></span><br><span class="line">    <span class="comment">//那就换成一个函数 (该函数会在环境变量被设置之后懒执行)。</span></span><br><span class="line">    <span class="comment">//该方法的第一个参数会收到已经解析好的配置。在函数内，你可以直接修改配置，或者返回一个将会被合并的对象：</span></span><br><span class="line">    configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">            <span class="comment">//为生产环境修改配置</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//为开发环境修改配置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三方插件</span></span><br><span class="line">    pluginOptions: &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">        port: <span class="number">8082</span>,</span><br><span class="line">        https: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//设置为 true 时，eslint-loader 会将 lint 错误输出为编译警告。默认情况下，警告仅仅会被输出到命令行，且不会使得编译失败。</span></span><br><span class="line">        <span class="comment">//如果你希望让 lint 错误在开发时直接显示在浏览器中，你可以使用 lintOnSave: 'error'。</span></span><br><span class="line">        <span class="comment">//这会强制 eslint-loader 将 lint 错误输出为编译错误，同时也意味着 lint 错误将会导致编译失败。</span></span><br><span class="line">        <span class="comment">//或者，你也可以通过设置让浏览器 overlay 同时显示警告和错误：</span></span><br><span class="line">        overlay: &#123;</span><br><span class="line">            warnings: <span class="literal">true</span>,</span><br><span class="line">            errors: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//服务器接口代理</span></span><br><span class="line">        <span class="comment">// proxy: ''</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是vue.config.js详细配置，注释也是比较详细，vue-cli3也是希望通过简单的语言来抛弃之前webpack的繁杂的配置，能更好的让我们专注于逻辑代码层面。<br>在<a href="https://cli.vuejs.org/zh/config/#全局-cli-配置" target="_blank" rel="noopener">官方文档</a>介绍中, 注入的webpack.config.js自带支持 <a href="https://vue-loader.vuejs.org/zh/guide/css-modules.html#用法" target="_blank" rel="noopener">PostCSS、CSS Modules 和包含 Sass、Less、Stylus 预处理器</a>。在<a href="https://cli.vuejs.org/zh/guide/webpack.html#链式操作-高级" target="_blank" rel="noopener">链式操作</a>中我们可以修改更加贴合项目的loader.</p><hr><h3 id="5-nbsp-nbsp-nbsp-Vue-Cli3配置PWA"><a href="#5-nbsp-nbsp-nbsp-Vue-Cli3配置PWA" class="headerlink" title="5.&nbsp;&nbsp;&nbsp;Vue Cli3配置PWA"></a>5.&nbsp;&nbsp;&nbsp;Vue Cli3配置PWA</h3><p>如果你还没有听说PWA或者对PWA知之甚少，请移步<a href="https://lzw.me/a/pwa-service-worker.html" target="_blank" rel="noopener">这里</a>，对PWA的解释在这里不做过多的赘述，作为前端开发的一员，网站渐进式增强体验(PWA)已经成为未来前端的趋势，所以我们应该积极的了解相关的知识。幸运的是，Vue Cli3已经全面支持在Cli阶段PWA的配置，这，才是该有的姿态。</p><p>对于serverWorker.js如果手动注入逻辑代码，显然会消耗程序员一大部分精力，尤其是对一个逻辑业务比较复杂的项目来说，这可能会让我们变的异常头痛，在很久之前，<br>webpack官方就出了自动构建PWA web应用的 pligins , <a href="https://github.com/goldhand/sw-precache-webpack-plugin" target="_blank" rel="noopener">sw-precache-webpack-plugin</a>,后来还有了<a href="https://github.com/NekR/offline-plugin" target="_blank" rel="noopener">offline-plugin</a>,无论哪一种都极大待简化我们构建PWA的成本。</p><p>想更多的了解 Vue Cli3请移步<a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa" target="_blank" rel="noopener">这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要介绍vue cli3的功能和特点，以及它和vue cli2X的对比，vue cli3具有功能丰富，易于扩展，无需Eject，更具有面向未来的特点，那么把你的项目构建于vue cli3之上吧&lt;/p&gt;
&lt;h3 id=&quot;1-此前，Vue-CLI-3-0-已发布，该版本经历
      
    
    </summary>
    
    
  </entry>
  
</feed>
